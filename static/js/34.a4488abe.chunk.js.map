{"version":3,"file":"static/js/34.a4488abe.chunk.js","mappings":"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","sources":["components/mini-crossword/MiniCrossword.tsx","components/archive/ArchiveElement.tsx","components/archive/Archive.tsx","components/modals/Modal.tsx","lib/crossword-utils.ts","redux/hooks/useGridData.ts"],"sourcesContent":["import React from \"react\";\r\nimport { CellData, GridData } from \"../../types\";\r\n\r\nexport type CellColors = { [position: string]: string };\r\n\r\nexport const SVG_WIDTH = 200;\r\nexport const SVG_HEADER_SIZE = 30;\r\n\r\ntype Props = {\r\n  title?: string; \r\n  gridData: GridData;\r\n  showLetters?: boolean;\r\n  cellColors?: CellColors;\r\n  margin?: number;\r\n}\r\n\r\nexport const MiniCrossword = React.forwardRef<SVGSVGElement, Props>(({ title, gridData, showLetters = false, cellColors = {}, margin = 20 }, ref) => {\r\n  const headerSize = title ? SVG_HEADER_SIZE : 0;\r\n  const svgHeight = SVG_WIDTH + headerSize;\r\n  const crosswordSize = SVG_WIDTH - 2 * margin;\r\n  const gridSize = gridData.length;\r\n  const squareSize = crosswordSize / gridSize;\r\n  const borderSize = 0.125;\r\n  const numberOffset = 0.5;\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${SVG_WIDTH} ${svgHeight}`} width={SVG_WIDTH} height={svgHeight} ref={ref}>\r\n      <rect x={0} y={0} width={SVG_WIDTH} height={svgHeight} fill=\"white\" />\r\n      {title && (\r\n        <text x={SVG_WIDTH / 2} y={SVG_HEADER_SIZE / 2} textAnchor=\"middle\" dominantBaseline='hanging' fontSize={14}>\r\n          {title}\r\n        </text>\r\n      )}\r\n      <rect x={margin} y={margin + headerSize} width={crosswordSize} height={crosswordSize} fill=\"black\" />\r\n      {gridData.flat().map((cell: CellData) => {\r\n        if (!cell.used) return null;\r\n        const key = `${cell.row}_${cell.col}`;\r\n\r\n        return (\r\n          <g key={key}>\r\n            <rect\r\n              x={cell.col * squareSize + borderSize + margin}\r\n              y={cell.row * squareSize + borderSize + margin + headerSize}\r\n              width={squareSize - 2 * borderSize}\r\n              height={squareSize - 2 * borderSize}\r\n              fill={cellColors[key] || 'white'}\r\n              stroke='black'\r\n              strokeWidth={0.4}\r\n            />\r\n            {cell.number && (\r\n              <text\r\n                x={cell.col * squareSize + numberOffset + margin}\r\n                y={cell.row * squareSize + numberOffset + margin + headerSize}\r\n                textAnchor=\"start\"\r\n                dominantBaseline=\"hanging\"\r\n                style={{ fontSize: '50%', fill: 'rgba(0, 0, 0, 0.25)'}}\r\n              >{cell.number}</text>\r\n            )}\r\n            {cell.guess && showLetters && (\r\n              <text\r\n                x={(cell.col + 0.5) * squareSize + margin}\r\n                y={(cell.row + 0.5) * squareSize + margin}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n                style={{ fill: 'rgba(0, 0, 0)', userSelect: 'none', fontSize: '25px' }}\r\n              >{cell.guess}</text>\r\n            )}\r\n            {cell.circle && (\r\n              <circle\r\n                cx={(cell.col + 0.5) * squareSize + margin}\r\n                cy={(cell.row + 0.5) * squareSize + margin + headerSize}\r\n                r={squareSize / 2}\r\n                fill='transparent'\r\n                stroke='rgba(0,0,0,0.5)'\r\n                strokeWidth={0.5}\r\n              />\r\n            )}\r\n          </g>\r\n        );\r\n      })}\r\n    </svg>\r\n  )\r\n});\r\n","import { useSelector } from 'react-redux';\r\nimport { useGridData } from '../../redux/hooks/useGridData';\r\nimport { RootState } from '../../redux/store';\r\nimport { MiniCrossword } from '../mini-crossword/MiniCrossword';\r\nimport last from 'lodash/last';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { crosswordIndex, dateFromPuzzleIndex } from '../../lib/utils';\r\nimport crosswords from '../../constants/crosswords';\r\n\r\ninterface Props {\r\n  index: number;\r\n};\r\n\r\nconst ArchiveElement : React.FC<Props> = ({ index }) => {\r\n  const navigate = useNavigate();\r\n  const [gridData] = useGridData(index);\r\n  const shareHistory = useSelector((state: RootState) => state.wordle.shareHistories[index]);\r\n  const cellColors = useMemo(() => last(shareHistory) || {}, [shareHistory]);\r\n  const crosswordData = crosswords[index];\r\n\r\n  const onClick = useCallback(() => {\r\n    if (index === crosswordIndex) {\r\n      navigate('/');\r\n    } else if (index > -1 && index < crosswordIndex) {\r\n      navigate(`/puzzles/${index + 1}`);\r\n    }\r\n  }, [index, navigate]);\r\n\r\n  const releaseDate = dateFromPuzzleIndex(index).toLocaleDateString('en-us',{\r\n    weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'\r\n  });\r\n\r\n  return (\r\n    <div onClick={onClick} className=\"m-3 cursor-pointer\">\r\n      <h3 className='text-xl dark:text-white'>Crosswordle {index + 1}</h3>\r\n      <MiniCrossword gridData={gridData} cellColors={cellColors} margin={5} />\r\n      <p className='text-slate-400'>{releaseDate}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArchiveElement;\r\n","import { AdjustmentsIcon, ChevronRightIcon } from '@heroicons/react/outline';\r\nimport { useMemo, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { crosswordIndex } from '../../lib/utils';\r\nimport ArchiveElement from './ArchiveElement';\r\nimport crosswords from '../../constants/crosswords';\r\nimport Select from 'react-select';\r\nimport uniq from 'lodash/uniq';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\nimport { Modal } from '../modals/Modal';\r\nimport { setOpenModal } from '../../redux/slices/navigationSlice';\r\nimport Elevator from 'elevator.js';\r\n\r\nconst elevator = new Elevator({\r\n  mainAudio: `${process.env.PUBLIC_URL}/elevator.mp3`,\r\n  endAudio: `${process.env.PUBLIC_URL}/ding.mp3`,\r\n});\r\n\r\nconst Archive : React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const crosswordIndicies = Array.from(Array(crosswordIndex + 1).keys());\r\n  const { gameWins, lostCells, shareHistories } = useSelector((state: RootState) => state.wordle);\r\n  const [filters, setFilters] = useState<{\r\n    author?: string,\r\n    gameState?: 'notStarted' | 'inProgress' | 'completed'\r\n  }>({});\r\n\r\n  const gameStateOptions = [\r\n    { label: 'Not Started', value: 'notStarted' },\r\n    { label: 'In Progress', value: 'inProgress' },\r\n    { label: 'Completed', value: 'completed' },\r\n  ] as const;\r\n\r\n  const authorsOptions = useMemo(() => {\r\n    return uniq(crosswordIndicies.map((index) => crosswords[index].author || 'Matthew Koppe')).map((author) => ({\r\n      label: author, value: author,\r\n    }))\r\n  }, [crosswordIndicies]);\r\n\r\n  const indicies = useMemo(() => {\r\n    const completedGames = { ...gameWins, ...lostCells };\r\n\r\n    return crosswordIndicies.filter((index) => {\r\n      if (filters.author && (crosswords[index].author || 'Matthew Koppe') !== filters.author) return false;\r\n      if (filters.gameState === 'notStarted' && shareHistories[index]?.length > 0) return false;\r\n      if (filters.gameState === 'inProgress' && (!shareHistories[index]?.length || completedGames[index])) return false;\r\n      if (filters.gameState === 'completed' && (!completedGames[index])) return false;\r\n\r\n      return true;\r\n    }).reverse();\r\n  }, [filters, crosswordIndicies, gameWins, lostCells, shareHistories]);\r\n\r\n  return (\r\n    <div className='flex flex-col min-h-screen'>\r\n      <div className=\"flex w-screen mx-auto items-center border-b-slate-400 border-b-[1px] p-4 sticky top-0 bg-white dark:bg-slate-900\">\r\n        <div className='grow flex flex-row justify-between items-center'>\r\n          <h1 className=\"text-l md:text-xl font-bold whitespace-nowrap dark:text-white\">Puzzle Archive</h1>\r\n          <div className='flex'>\r\n            <div className='hidden md:flex'>\r\n              {/* <Select\r\n                options={gameStateOptions}\r\n                onChange={(option) => setFilters({ ...filters, gameState: option?.value })}\r\n                placeholder='Filter by game state'\r\n                isClearable\r\n                className='w-30 mr-4'\r\n              />\r\n              <Select\r\n                options={authorsOptions}\r\n                onChange={(option) => setFilters({ ...filters, author: option?.value })}\r\n                placeholder='Filter by author'\r\n                isClearable\r\n                className='w-30 mr-4'\r\n              /> */}\r\n            </div>\r\n            <AdjustmentsIcon\r\n              className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white block md:hidden\"\r\n              onClick={() => dispatch(setOpenModal('filters'))}\r\n            />\r\n            <Modal name='filters' title='Filters'>\r\n              <Select\r\n                options={authorsOptions}\r\n                onChange={(option) => setFilters({ ...filters, author: option?.value })}\r\n                placeholder='Filter by author'\r\n                isClearable\r\n                className='w-30 mr-4 my-5'\r\n                maxMenuHeight={200}\r\n              />\r\n              <Select\r\n                options={gameStateOptions}\r\n                onChange={(option) => setFilters({ ...filters, gameState: option?.value })}\r\n                placeholder='Filter by game state'\r\n                isClearable\r\n                className='w-30 mr-4 my-5'\r\n                maxMenuHeight={200}\r\n              />\r\n              <div className='mb-40' />\r\n            </Modal>\r\n            <p onClick={() => navigate('/')} className=\" text-l md:text-xl cursor-pointer text-indigo-600 dark:text-white\">\r\n              Daily puzzle <ChevronRightIcon className='inline w-4' />\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='w-screen text-center'>\r\n        <div className='flex flex-wrap justify-center w-full mx-auto'>\r\n          {indicies.map((index) => <ArchiveElement index={index} key={index.toString()} />)}\r\n        </div>\r\n      </div>\r\n      <button onClick={() => elevator.elevate()} className=\"mx-auto px-2.5 py-1.5 mb-5 border border-transparent text-xs font-medium rounded text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\r\n        Back to the top\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Archive;\r\n","import { Fragment, ReactNode } from 'react'\r\nimport { Dialog, Transition } from '@headlessui/react'\r\nimport { XCircleIcon } from '@heroicons/react/outline'\r\nimport { RootState } from '../../redux/store'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setOpenModal } from '../../redux/slices/navigationSlice'\r\n\r\ntype Props = {\r\n  name: RootState['navigation']['openModal'];\r\n  title: string;\r\n  titleIcon?: ReactNode;\r\n  returnTo?: RootState['navigation']['openModal'];\r\n}\r\n\r\nexport const Modal : React.FC<Props> = ({ name, title, titleIcon, returnTo, children }) => {\r\n  const dispatch = useDispatch();\r\n  const isOpen = useSelector((state: RootState) => state.navigation.openModal === name);\r\n\r\n  return (\r\n    <Transition.Root show={isOpen} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        className=\"fixed z-10 inset-0 overflow-y-auto\"\r\n        onClose={() => dispatch(setOpenModal(returnTo))}\r\n      >\r\n        <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"ease-out duration-300\"\r\n            enterFrom=\"opacity-0\"\r\n            enterTo=\"opacity-100\"\r\n            leave=\"ease-in duration-200\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\r\n          </Transition.Child>\r\n\r\n          {/* This element is to trick the browser into centering the modal contents. */}\r\n          <span\r\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            &#8203;\r\n          </span>\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"ease-out duration-300\"\r\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\r\n            leave=\"ease-in duration-200\"\r\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\r\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n          >\r\n            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all md:max-w-lg sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6\">\r\n              <div className=\"absolute right-4 top-4\">\r\n                <XCircleIcon\r\n                  className=\"h-6 w-6 cursor-pointer\"\r\n                  onClick={() => dispatch(setOpenModal(returnTo))}\r\n                />\r\n              </div>\r\n              <div>\r\n                <div className=\"text-center\">\r\n                  <div className='mb-2'>{titleIcon}</div>\r\n                  <Dialog.Title\r\n                    as=\"h3\"\r\n                    className=\"text-lg leading-6 font-medium text-gray-900\"\r\n                  >\r\n                    {title}\r\n                  </Dialog.Title>\r\n                  <div className=\"mt-2\">\r\n                    {children}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Transition.Child>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  )\r\n}\r\n","import type {\r\n  CrosswordInput,\r\n  Direction,\r\n  GridData,\r\n  UsedCellData,\r\n} from '../types';\r\n\r\ntype RowOrCol = 'row' | 'col';\r\n\r\nconst directionInfo: Record<\r\n  Direction,\r\n  { primary: RowOrCol; orthogonal: RowOrCol }\r\n> = {\r\n  across: {\r\n    primary: 'col',\r\n    orthogonal: 'row',\r\n  },\r\n  down: {\r\n    primary: 'row',\r\n    orthogonal: 'col',\r\n  },\r\n};\r\n\r\nexport const bothDirections = Object.keys(directionInfo) as Direction[];\r\n\r\nexport function isAcross(direction: Direction) {\r\n  return direction === 'across';\r\n}\r\n\r\nexport function otherDirection(direction: Direction) {\r\n  return isAcross(direction) ? 'down' : 'across';\r\n}\r\n\r\nexport function calculateExtents(data: CrosswordInput, direction: Direction) {\r\n  const dir = directionInfo[direction];\r\n  let primaryMax = 0;\r\n  let orthogonalMax = 0;\r\n\r\n  Object.entries(data[direction]).forEach(([, info]) => {\r\n    const primary = info[dir.primary] + info.answer.length - 1;\r\n    if (primary > primaryMax) {\r\n      primaryMax = primary;\r\n    }\r\n\r\n    const orthogonal = info[dir.orthogonal];\r\n    if (orthogonal > orthogonalMax) {\r\n      orthogonalMax = orthogonal;\r\n    }\r\n  });\r\n\r\n  return {\r\n    [dir.primary]: primaryMax,\r\n    [dir.orthogonal]: orthogonalMax,\r\n  };\r\n}\r\n\r\nexport function createEmptyGrid(size: number) {\r\n  const gridData: GridData = Array(size);\r\n\r\n  for (let r = 0; r < size; r++) {\r\n    gridData[r] = Array(size);\r\n    for (let c = 0; c < size; c++) {\r\n      gridData[r][c] = {\r\n        row: r,\r\n        col: c,\r\n        used: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  return gridData;\r\n}\r\n\r\n// Given the \"nice format\" for a crossword, generate the usable data optimized\r\n// for rendering and our interactivity.\r\nexport function createGridData(data: CrosswordInput) {\r\n  const acrossMax = calculateExtents(data, 'across');\r\n  const downMax = calculateExtents(data, 'down');\r\n\r\n  const size =\r\n    Math.max(...Object.values(acrossMax), ...Object.values(downMax)) + 1;\r\n\r\n  const gridData = createEmptyGrid(size);\r\n\r\n  bothDirections.forEach((direction) => {\r\n    Object.entries(data[direction]).forEach(([number, info]) => {\r\n      const { row: rowStart, col: colStart, answer } = info;\r\n      for (let i = 0; i < answer.length; i++) {\r\n        const row = rowStart + (direction === 'down' ? i : 0);\r\n        const col = colStart + (direction === 'across' ? i : 0);\r\n        const cellData = gridData[row][col] as UsedCellData;\r\n  \r\n        cellData.used = true;\r\n        cellData.answer = answer[i];\r\n        cellData[direction] = number;\r\n  \r\n        if (i === 0) cellData.number = number;\r\n      }\r\n    });\r\n  });\r\n\r\n  if (data.circles) {\r\n    data.circles.forEach(([row, col]) => {\r\n      const cellData = gridData[row][col];\r\n      if (!cellData.used) return;\r\n\r\n      cellData.circle = true;\r\n    });\r\n  }\r\n\r\n  return gridData;\r\n}\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { GridData } from \"../../types\"\r\nimport { RootState } from \"../store\"\r\nimport { setGridData } from \"../slices/crosswordSlice\";\r\nimport { createGridData } from \"../../lib/crossword-utils\";\r\nimport crosswords from \"../../constants/crosswords\";\r\n\r\nexport const useGridData = (index: number) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const updateGridData = useCallback((newGridData: GridData) => {\r\n    dispatch(setGridData({ index, gridData: newGridData }));\r\n  }, [dispatch, index]);\r\n\r\n  const gridData = useSelector((state: RootState) => {\r\n    const data = state.crossword.gridDatas[index];\r\n    if (!data) {\r\n      const initialGridData = createGridData(crosswords[index]);\r\n      updateGridData(initialGridData);\r\n      return initialGridData;\r\n    }\r\n    return data;\r\n  });\r\n\r\n  return [gridData, updateGridData] as const;\r\n}\r\n"],"names":["SVG_WIDTH","MiniCrossword","React","ref","title","gridData","showLetters","cellColors","margin","headerSize","svgHeight","crosswordSize","squareSize","length","borderSize","viewBox","width","height","x","y","fill","SVG_HEADER_SIZE","textAnchor","dominantBaseline","fontSize","flat","map","cell","used","key","row","col","stroke","strokeWidth","number","style","guess","userSelect","circle","cx","cy","r","index","navigate","useNavigate","useGridData","shareHistory","useSelector","state","wordle","shareHistories","useMemo","last","onClick","crosswords","useCallback","crosswordIndex","releaseDate","dateFromPuzzleIndex","toLocaleDateString","weekday","year","month","day","className","elevator","Elevator","mainAudio","process","endAudio","dispatch","useDispatch","crosswordIndicies","Array","from","keys","gameWins","lostCells","useState","filters","setFilters","authorsOptions","uniq","author","label","value","indicies","completedGames","filter","gameState","reverse","setOpenModal","Modal","name","options","onChange","option","placeholder","isClearable","maxMenuHeight","toString","elevate","titleIcon","returnTo","children","isOpen","navigation","openModal","show","as","Fragment","onClose","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","directionInfo","across","primary","orthogonal","down","bothDirections","Object","otherDirection","direction","isAcross","calculateExtents","data","dir","primaryMax","orthogonalMax","entries","forEach","info","answer","createGridData","acrossMax","downMax","size","c","createEmptyGrid","Math","max","values","rowStart","colStart","i","cellData","circles","updateGridData","newGridData","setGridData","crossword","gridDatas","initialGridData"],"sourceRoot":""}