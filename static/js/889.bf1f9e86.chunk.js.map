{"version":3,"file":"static/js/889.bf1f9e86.chunk.js","mappings":"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","sources":["lib/hooks.ts","lib/statuses.ts","components/grid/Cell.tsx","components/grid/CompletedRow.tsx","components/grid/CurrentRow.tsx","components/grid/EmptyRow.tsx","components/grid/MobileGrid.tsx","components/grid/Grid.tsx","components/keyboard/Key.tsx","lib/useWindowListener.ts","components/keyboard/Keyboard.tsx","constants/colors.ts","components/crossword/Crossword.tsx","lib/analytics.ts","components/modals/SubmitModal.tsx","components/modals/TimerHelpModal.tsx","components/crosswordle.tsx","redux/hooks/useGameState.ts","lib/words.ts","redux/hooks/useStats.ts","lib/useInterval.ts","components/modals/Modal.tsx","lib/crossword-utils.ts","redux/hooks/useGridData.ts"],"sourcesContent":["import { useWindowWidth } from '@react-hook/window-size/throttled';\r\nimport { useRef, useState } from 'react';\r\n\r\nconst BREAKPOINTS = {\r\n  xs: 414,\r\n  sm: 640,\r\n  md: 768,\r\n  lg: 1024,\r\n} as const;\r\n\r\nexport const useMediaBreakpoints = (size: 'sm' | 'md' | 'lg', direction: 'up' | 'down') => {\r\n  const width = useWindowWidth();\r\n  if (direction === 'up') {\r\n    return width >= BREAKPOINTS[size];\r\n  } else {\r\n    return width < BREAKPOINTS[size];\r\n  }\r\n}\r\n\r\nexport const useRefState = <T>(initial: T | (() => T)) => {\r\n  const [state, _setState] = useState<T>(initial);\r\n  const stateRef = useRef(state);\r\n\r\n  const setState = (value: T) => {\r\n    _setState(value);\r\n    stateRef.current = value;\r\n  };\r\n\r\n  return [state, setState, stateRef] as const;\r\n};\r\n","export type CharStatus = 'absent' | 'present' | 'correct' | 'known';\r\n\r\nexport type CharValue =\r\n  | 'Q'\r\n  | 'W'\r\n  | 'E'\r\n  | 'R'\r\n  | 'T'\r\n  | 'Y'\r\n  | 'U'\r\n  | 'I'\r\n  | 'O'\r\n  | 'P'\r\n  | 'A'\r\n  | 'S'\r\n  | 'D'\r\n  | 'F'\r\n  | 'G'\r\n  | 'H'\r\n  | 'J'\r\n  | 'K'\r\n  | 'L'\r\n  | 'Z'\r\n  | 'X'\r\n  | 'C'\r\n  | 'V'\r\n  | 'B'\r\n  | 'N'\r\n  | 'M'\r\n\r\nexport const getStatuses = (\r\n  solution: string,\r\n  guesses: string[],\r\n  knownChars?: string[]\r\n): { [key: string]: CharStatus } => {\r\n  const charObj: { [key: string]: CharStatus } = {}\r\n\r\n  guesses.forEach((word) => {\r\n    word.split('').forEach((letter, i) => {\r\n      if (!solution.includes(letter)) {\r\n        // make status absent\r\n        return (charObj[letter] = 'absent')\r\n      }\r\n\r\n      if (letter === solution[i]) {\r\n        //make status correct\r\n        return (charObj[letter] = 'correct')\r\n      }\r\n\r\n      if (charObj[letter] !== 'correct') {\r\n        //make status present\r\n        return (charObj[letter] = 'present')\r\n      }\r\n    })\r\n  })\r\n\r\n  knownChars?.forEach((letter) => {\r\n    if (charObj[letter] !== 'correct') charObj[letter] = 'known'\r\n  });\r\n\r\n  return charObj\r\n}\r\n\r\nexport const getGuessStatuses = (solution: string, guess: string): CharStatus[] => {\r\n  const splitSolution = solution.split('')\r\n  const splitGuess = guess.split('')\r\n\r\n  const solutionCharsTaken = splitSolution.map((_) => false)\r\n\r\n  const statuses: CharStatus[] = Array.from(Array(guess.length))\r\n\r\n  // handle all correct cases first\r\n  splitGuess.forEach((letter, i) => {\r\n    if (letter === splitSolution[i]) {\r\n      statuses[i] = 'correct'\r\n      solutionCharsTaken[i] = true\r\n      return\r\n    }\r\n  })\r\n\r\n  splitGuess.forEach((letter, i) => {\r\n    if (statuses[i]) return\r\n\r\n    if (!splitSolution.includes(letter)) {\r\n      // handles the absent case\r\n      statuses[i] = 'absent'\r\n      return\r\n    }\r\n\r\n    // now we are left with \"present\"s\r\n    const indexOfPresentChar = splitSolution.findIndex(\r\n      (x, index) => x === letter && !solutionCharsTaken[index]\r\n    )\r\n\r\n    if (indexOfPresentChar > -1) {\r\n      statuses[i] = 'present'\r\n      solutionCharsTaken[indexOfPresentChar] = true\r\n      return\r\n    } else {\r\n      statuses[i] = 'absent'\r\n      return\r\n    }\r\n  })\r\n\r\n  return statuses\r\n}\r\n","import { CharStatus } from '../../lib/statuses'\r\nimport classnames from 'classnames'\r\nimport { useMediaBreakpoints } from '../../lib/hooks'\r\nimport { useWindowHeight } from '@react-hook/window-size/throttled'\r\nimport { RootState } from '../../redux/store'\r\nimport { useSelector } from 'react-redux'\r\n\r\ntype Props = {\r\n  value?: string;\r\n  mode?: 'input' | 'known' | 'pencil';\r\n  status?: CharStatus;\r\n  size?: 'sm' | 'lg';\r\n  isFocused?: boolean;\r\n}\r\n\r\nexport const Cell = ({ value, status, mode = 'input', size = 'lg', isFocused = false }: Props) => {\r\n  const isMobile = useMediaBreakpoints('md', 'down');\r\n  const height = useWindowHeight();\r\n  const highContrastMode = useSelector((state: RootState) => state.settings.highContrastMode);\r\n\r\n  const classes = classnames(\r\n    'border-solid border-2 flex items-center justify-center mx-0.5 font-bold rounded dark:text-white select-none',\r\n    {\r\n      'bg-white border-slate-200 dark:bg-slate-900 dark:border-slate-600': !status,\r\n      'bg-white border-slate-200 text-green-500 text-opacity-50 dark:text-green-500': mode === 'known' && !status && !highContrastMode,\r\n      'bg-white border-slate-200 text-orange-500 text-opacity-50 dark:text-orange-500': mode === 'known' && !status && highContrastMode,\r\n      'bg-white border-slate-200 text-slate-400/50 text-opacity-50 dark:text-slate-400/50': mode === 'pencil' && !status,\r\n      'bg-slate-400 dark:bg-slate-700 text-white border-slate-400 dark:border-slate-700': status === 'absent',\r\n      'bg-green-500 text-white border-green-500': status === 'correct' && !highContrastMode,\r\n      'bg-orange-500 text-white border-orange-500': status === 'correct' && highContrastMode,\r\n      'bg-yellow-500 dark:bg-yellow-700 text-white border-yellow-500 dark:border-yellow-700':\r\n        status === 'present' && !highContrastMode,\r\n      'bg-cyan-500 text-white border-cyan-500': status === 'present' && highContrastMode,\r\n      'w-14 h-14 text-lg': size === 'lg',\r\n      'w-5 h-5 text-sm': size === 'sm',\r\n      'w-10 h-10 text-lg': size === 'lg' && isMobile,\r\n      'border-yellow-300': isFocused,\r\n      'short-tolerant': !isMobile && height > 600,\r\n    }\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <div className={classes}>{value}</div>\r\n    </>\r\n  )\r\n}\r\n","import { getGuessStatuses } from '../../lib/statuses'\r\nimport { Cell } from './Cell'\r\n\r\ntype Props = {\r\n  solution: string;\r\n  guess: string;\r\n  size?: 'sm' | 'lg';\r\n}\r\n\r\nexport const CompletedRow = ({ solution, guess, size = 'lg' }: Props) => {\r\n  const statuses = getGuessStatuses(solution, guess);\r\n\r\n  return (\r\n    <div className=\"flex justify-center mb-1\">\r\n      {guess.split('').map((letter, i) => (\r\n        <Cell key={i} value={letter} status={statuses[i]} size={size} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport { RootState } from '../../redux/store'\r\nimport { Cell } from './Cell'\r\n\r\ntype Props = {\r\n  guess: string\r\n  solution: string\r\n  focusedIndex: number\r\n}\r\n\r\nexport const CurrentRow: React.FC<Props> = ({\r\n  guess,\r\n  solution,\r\n  focusedIndex,\r\n}) => {\r\n  const { knownLetters, penciledLetters } = useSelector(\r\n    (state: RootState) => state.crossword\r\n  )\r\n\r\n  if (solution.length - guess.length < 0) return null\r\n\r\n  const splitGuess = guess.split('')\r\n  const emptyCells = Array.from(Array(solution.length - splitGuess.length))\r\n  const guessLength = splitGuess.length\r\n\r\n  const getLetter = (index: number) =>\r\n    splitGuess[index] || knownLetters[index] || penciledLetters[index]\r\n\r\n  const getMode = (index: number) => {\r\n    if (splitGuess[index]) return 'input'\r\n    if (knownLetters[index]) return 'known'\r\n    if (penciledLetters[index]) return 'pencil'\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center mb-1\">\r\n      {splitGuess.map((_, i) => (\r\n        <Cell\r\n          key={i}\r\n          value={getLetter(i)}\r\n          mode={getMode(i)}\r\n          isFocused={i === focusedIndex}\r\n        />\r\n      ))}\r\n      {emptyCells.map((_, i) => (\r\n        <Cell\r\n          key={i}\r\n          value={getLetter(i + guessLength)}\r\n          mode={getMode(i + guessLength)}\r\n          isFocused={i + guessLength === focusedIndex}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import { Cell } from './Cell'\r\n\r\ntype Props = {\r\n  solution: string;\r\n  size?: 'sm' | 'lg';\r\n}\r\n\r\nexport const EmptyRow : React.FC<Props>= ({ solution, size = 'lg' }) => {\r\n  const emptyCells = Array.from(Array(solution.length))\r\n\r\n  return (\r\n    <div className=\"flex justify-center mb-1\">\r\n      {emptyCells.map((_, i) => (\r\n        <Cell key={i} size={size} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import { CompletedRow } from './CompletedRow'\r\nimport { CurrentRow } from './CurrentRow'\r\nimport { EmptyRow } from './EmptyRow'\r\n\r\ntype Props = {\r\n  solution: string;\r\n  guesses: string[];\r\n  currentGuess: string;\r\n  focusedIndex: number;\r\n}\r\n\r\nexport const MobileGrid = ({ solution, guesses, currentGuess, focusedIndex }: Props) => {\r\n  const firstHalf = guesses.slice(0, 3);\r\n  const firstHalfEmpties = Array.from(Array(3 - firstHalf.length));\r\n  const secondHalf = guesses.slice(3, 6);\r\n  const secondHalfEmpties = Array.from(Array(3 - secondHalf.length));\r\n\r\n  return (\r\n    <div className=\"pb-3\">\r\n      <div className='flex my-2 w-full'>\r\n        <div className='w-1/2'>\r\n          {firstHalf.map((guess, i) => (\r\n            <CompletedRow key={i} guess={guess} solution={solution} size='sm' />\r\n          ))}\r\n          {firstHalfEmpties.map((_, i) => (\r\n            <EmptyRow key={i} solution={solution} size='sm' />\r\n          ))}\r\n        </div>\r\n        <div className='w-1/2'>\r\n          {secondHalf.map((guess, i) => (\r\n            <CompletedRow key={i} guess={guess} solution={solution} size='sm' />\r\n          ))}\r\n          {secondHalfEmpties.map((_, i) => (\r\n            <EmptyRow key={i} solution={solution} size='sm' />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <CurrentRow guess={currentGuess} solution={solution} focusedIndex={focusedIndex} />\r\n    </div>\r\n  )\r\n}\r\n","import { useWindowHeight } from '@react-hook/window-size/throttled';\r\nimport { useMediaBreakpoints } from '../../lib/hooks';\r\nimport { CompletedRow } from './CompletedRow';\r\nimport { CurrentRow } from './CurrentRow';\r\nimport { EmptyRow } from './EmptyRow';\r\nimport { MobileGrid } from './MobileGrid';\r\n\r\ntype Props = {\r\n  solution: string;\r\n  guesses: string[];\r\n  currentGuess: string;\r\n  focusedIndex: number;\r\n}\r\n\r\nexport const Grid = ({ solution, guesses, currentGuess, focusedIndex }: Props) => {\r\n  const isMobile = useMediaBreakpoints('md', 'down');\r\n  const height = useWindowHeight();\r\n\r\n  if (isMobile || height < 600) return <MobileGrid {...{ solution, guesses, currentGuess, focusedIndex }} />;\r\n\r\n  const empties =\r\n    guesses.length < 5 ? Array.from(Array(5 - guesses.length)) : [];\r\n\r\n  return (\r\n    <div className=\"pb-6\">\r\n      {guesses.map((guess, i) => (\r\n        <CompletedRow key={i} guess={guess} solution={solution} />\r\n      ))}\r\n      {guesses.length < 6 && (\r\n        <CurrentRow guess={currentGuess} solution={solution} focusedIndex={focusedIndex} />\r\n      )}\r\n      {empties.map((_, i) => (\r\n        <EmptyRow key={i} solution={solution} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n","import { ReactNode } from 'react';\r\nimport classnames from 'classnames';\r\nimport { KeyValue } from '../../lib/keyboard';\r\nimport { CharStatus } from '../../lib/statuses';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\n\r\ntype Props = {\r\n  children?: ReactNode;\r\n  value: KeyValue;\r\n  size?: 'sm' | 'lg';\r\n  status?: CharStatus;\r\n  crossedStatus?: CharStatus;\r\n  onClick?: (value: KeyValue) => void;\r\n}\r\n\r\nexport const Key = ({\r\n  children,\r\n  status,\r\n  crossedStatus,\r\n  size = 'sm',\r\n  value,\r\n  onClick = () => {},\r\n}: Props) => {\r\n  const highContrastMode = useSelector((state: RootState) => state.settings.highContrastMode);\r\n\r\n  const classes = classnames(\r\n    'flex items-center justify-center rounded mx-0.5 text-xs font-bold cursor-pointer keyboard-key dark:text-white',\r\n    `keyboard-key-${size} select-none`,\r\n    {\r\n      'bg-slate-200 dark:bg-slate-600 hover:bg-slate-300 active:bg-slate-400': !status,\r\n      'bg-slate-400 text-white': status === 'absent',\r\n      'bg-green-500 hover:bg-green-600 active:bg-green-700 text-white dark:bg-green-700':\r\n        status === 'correct' && !highContrastMode,\r\n      'bg-yellow-500 hover:bg-yellow-600 active:bg-yellow-700 text-white dark:bg-yellow-700':\r\n        status === 'present' && !highContrastMode,\r\n      'bg-orange-500 hover:bg-orange-600 active:bg-orange-700 text-white dark:bg-orange-700':\r\n        status === 'correct' && highContrastMode,\r\n      'bg-cyan-500 hover:bg-cyan-600 active:bg-cyan-700 text-white dark:bg-cyan-700':\r\n        status === 'present' && highContrastMode,\r\n      'bg-cross-slate': !status && crossedStatus === 'absent',\r\n      'bg-cross-yellow': status === 'present' && crossedStatus === 'absent' && !highContrastMode,\r\n      'bg-cross-cyan': status === 'present' && crossedStatus === 'absent' && highContrastMode,\r\n      'bg-cross-green': status === 'correct' && crossedStatus === 'absent' && !highContrastMode,\r\n      'bg-cross-orange': status === 'correct' && crossedStatus === 'absent' && highContrastMode,\r\n    }\r\n  )\r\n\r\n  return (\r\n    <div\r\n      className={classes}\r\n      onClick={() => onClick(value)}\r\n    >\r\n      {children || value}\r\n    </div>\r\n  )\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useWindowListener(action: keyof WindowEventMap, callback: Function) {\r\n  const savedCallback = useRef<Function>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    const listener = (e: any) => {\r\n      if (savedCallback.current) savedCallback.current(e);\r\n    }\r\n\r\n    window.addEventListener(action, listener);\r\n    return () => {\r\n      window.removeEventListener(action, listener);\r\n    }\r\n  }, [action]);\r\n}\r\n","import { KeyValue } from '../../lib/keyboard'\r\nimport { CharStatus, getStatuses } from '../../lib/statuses'\r\nimport { Key } from './Key'\r\nimport { BackspaceIcon } from '@heroicons/react/outline'\r\nimport { RootState } from '../../redux/store'\r\nimport { useSelector } from 'react-redux'\r\nimport { useWindowListener } from '../../lib/useWindowListener'\r\n\r\ntype Props = {\r\n  solution: string\r\n  crossedSolution: string | undefined\r\n  onChar: (value: string) => void\r\n  onDelete: () => void\r\n  onEnter: () => void\r\n  guesses: string[]\r\n  crossedGuesses: string[]\r\n  index: number\r\n  crossedIndex?: number\r\n}\r\n\r\nexport const Keyboard = ({\r\n  solution,\r\n  crossedSolution,\r\n  onChar,\r\n  onDelete,\r\n  onEnter,\r\n  guesses,\r\n  crossedGuesses,\r\n  index,\r\n  crossedIndex,\r\n}: Props) => {\r\n  const advancedKeyboard = useSelector(\r\n    (state: RootState) => state.settings.advancedKeyboard\r\n  )\r\n  const knownLetters = useSelector(\r\n    (state: RootState) => state.crossword.knownLetters\r\n  )\r\n  const charStatuses = getStatuses(solution, guesses)\r\n  let crossedCharStatus: { [key: string]: CharStatus | undefined } = {}\r\n\r\n  // Update all known letters in the word to green\r\n  knownLetters.forEach((letter) => {\r\n    if (letter) charStatuses[letter] = 'correct'\r\n  })\r\n\r\n  if (advancedKeyboard) {\r\n    crossedCharStatus = crossedSolution\r\n      ? getStatuses(crossedSolution, crossedGuesses)\r\n      : {}\r\n\r\n    // Update all incorrect letters at the selected position to be partially gray\r\n    // TODO: Update crossedCharStatus to be an array of letters that should be partially grayed\r\n    // TODO: Given solution \"bends\" and guess \"seedy\" mark all e's except the 2nd index as partially gray\r\n    guesses.forEach((guess) => {\r\n      if (guess[index] !== solution[index])\r\n        crossedCharStatus[guess[index]] = 'absent'\r\n    })\r\n    crossedGuesses.forEach((guess) => {\r\n      if (crossedIndex === undefined || !crossedSolution) return\r\n\r\n      if (guess[crossedIndex] !== crossedSolution[crossedIndex])\r\n        crossedCharStatus[guess[crossedIndex]] = 'absent'\r\n    })\r\n  }\r\n\r\n  const onClick = (value: KeyValue) => {\r\n    if (value === 'ENTER') {\r\n      onEnter()\r\n    } else if (value === 'DELETE') {\r\n      onDelete()\r\n    } else {\r\n      onChar(value)\r\n    }\r\n  }\r\n\r\n  useWindowListener('keyup', (e: KeyboardEvent) => {\r\n    if (e.code === 'Enter') {\r\n      onEnter()\r\n    } else if (e.code === 'Backspace') {\r\n      onDelete()\r\n    } else {\r\n      const key = e.key.toUpperCase()\r\n      if (key.length === 1 && key >= 'A' && key <= 'Z') {\r\n        onChar(key)\r\n      }\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div className=\"mt-auto md:mt-none mb-3\">\r\n      <div className=\"flex justify-center mb-1\">\r\n        <Key\r\n          value=\"Q\"\r\n          onClick={onClick}\r\n          status={charStatuses['Q']}\r\n          crossedStatus={crossedCharStatus['Q']}\r\n        />\r\n        <Key\r\n          value=\"W\"\r\n          onClick={onClick}\r\n          status={charStatuses['W']}\r\n          crossedStatus={crossedCharStatus['W']}\r\n        />\r\n        <Key\r\n          value=\"E\"\r\n          onClick={onClick}\r\n          status={charStatuses['E']}\r\n          crossedStatus={crossedCharStatus['E']}\r\n        />\r\n        <Key\r\n          value=\"R\"\r\n          onClick={onClick}\r\n          status={charStatuses['R']}\r\n          crossedStatus={crossedCharStatus['R']}\r\n        />\r\n        <Key\r\n          value=\"T\"\r\n          onClick={onClick}\r\n          status={charStatuses['T']}\r\n          crossedStatus={crossedCharStatus['T']}\r\n        />\r\n        <Key\r\n          value=\"Y\"\r\n          onClick={onClick}\r\n          status={charStatuses['Y']}\r\n          crossedStatus={crossedCharStatus['Y']}\r\n        />\r\n        <Key\r\n          value=\"U\"\r\n          onClick={onClick}\r\n          status={charStatuses['U']}\r\n          crossedStatus={crossedCharStatus['U']}\r\n        />\r\n        <Key\r\n          value=\"I\"\r\n          onClick={onClick}\r\n          status={charStatuses['I']}\r\n          crossedStatus={crossedCharStatus['I']}\r\n        />\r\n        <Key\r\n          value=\"O\"\r\n          onClick={onClick}\r\n          status={charStatuses['O']}\r\n          crossedStatus={crossedCharStatus['O']}\r\n        />\r\n        <Key\r\n          value=\"P\"\r\n          onClick={onClick}\r\n          status={charStatuses['P']}\r\n          crossedStatus={crossedCharStatus['P']}\r\n        />\r\n      </div>\r\n      <div className=\"flex justify-center mb-1\">\r\n        <Key\r\n          value=\"A\"\r\n          onClick={onClick}\r\n          status={charStatuses['A']}\r\n          crossedStatus={crossedCharStatus['A']}\r\n        />\r\n        <Key\r\n          value=\"S\"\r\n          onClick={onClick}\r\n          status={charStatuses['S']}\r\n          crossedStatus={crossedCharStatus['S']}\r\n        />\r\n        <Key\r\n          value=\"D\"\r\n          onClick={onClick}\r\n          status={charStatuses['D']}\r\n          crossedStatus={crossedCharStatus['D']}\r\n        />\r\n        <Key\r\n          value=\"F\"\r\n          onClick={onClick}\r\n          status={charStatuses['F']}\r\n          crossedStatus={crossedCharStatus['F']}\r\n        />\r\n        <Key\r\n          value=\"G\"\r\n          onClick={onClick}\r\n          status={charStatuses['G']}\r\n          crossedStatus={crossedCharStatus['G']}\r\n        />\r\n        <Key\r\n          value=\"H\"\r\n          onClick={onClick}\r\n          status={charStatuses['H']}\r\n          crossedStatus={crossedCharStatus['H']}\r\n        />\r\n        <Key\r\n          value=\"J\"\r\n          onClick={onClick}\r\n          status={charStatuses['J']}\r\n          crossedStatus={crossedCharStatus['J']}\r\n        />\r\n        <Key\r\n          value=\"K\"\r\n          onClick={onClick}\r\n          status={charStatuses['K']}\r\n          crossedStatus={crossedCharStatus['K']}\r\n        />\r\n        <Key\r\n          value=\"L\"\r\n          onClick={onClick}\r\n          status={charStatuses['L']}\r\n          crossedStatus={crossedCharStatus['L']}\r\n        />\r\n      </div>\r\n      <div className=\"flex justify-center\">\r\n        <Key size=\"lg\" value=\"ENTER\" onClick={onClick}>\r\n          Enter\r\n        </Key>\r\n        <Key\r\n          value=\"Z\"\r\n          onClick={onClick}\r\n          status={charStatuses['Z']}\r\n          crossedStatus={crossedCharStatus['Z']}\r\n        />\r\n        <Key\r\n          value=\"X\"\r\n          onClick={onClick}\r\n          status={charStatuses['X']}\r\n          crossedStatus={crossedCharStatus['X']}\r\n        />\r\n        <Key\r\n          value=\"C\"\r\n          onClick={onClick}\r\n          status={charStatuses['C']}\r\n          crossedStatus={crossedCharStatus['C']}\r\n        />\r\n        <Key\r\n          value=\"V\"\r\n          onClick={onClick}\r\n          status={charStatuses['V']}\r\n          crossedStatus={crossedCharStatus['V']}\r\n        />\r\n        <Key\r\n          value=\"B\"\r\n          onClick={onClick}\r\n          status={charStatuses['B']}\r\n          crossedStatus={crossedCharStatus['B']}\r\n        />\r\n        <Key\r\n          value=\"N\"\r\n          onClick={onClick}\r\n          status={charStatuses['N']}\r\n          crossedStatus={crossedCharStatus['N']}\r\n        />\r\n        <Key\r\n          value=\"M\"\r\n          onClick={onClick}\r\n          status={charStatuses['M']}\r\n          crossedStatus={crossedCharStatus['M']}\r\n        />\r\n        <Key size=\"lg\" value=\"DELETE\" onClick={onClick}>\r\n          <BackspaceIcon width={25} height={25} />\r\n        </Key>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","export const WORDLE_CORRECT_COLOR = 'rgb(34, 197, 94)';\r\nexport const WORDLE_WRONG_COLOR = 'rgb(148, 163, 184)';\r\nexport const WORDLE_MISPLACED_COLOR = 'rgb(234, 179, 8)';\r\nexport const WORDLE_LOSE_COLOR = 'red';\r\n","import get from \"lodash/get\";\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport React, { useCallback, useEffect, useImperativeHandle, useMemo } from \"react\";\r\nimport { useMediaBreakpoints, useRefState } from \"../../lib/hooks\";\r\nimport { GridData, CellData, Direction, UsedCellData, WordInput } from \"../../types\"\r\nimport { createGridData, otherDirection } from \"../../lib/crossword-utils\";\r\nimport { useGridData } from \"../../redux/hooks/useGridData\";\r\nimport { getInitialClue } from \"../../lib/utils\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { setKnownLetters, setPenciledLetters } from \"../../redux/slices/crosswordSlice\";\r\nimport crosswords from \"../../constants/crosswords\";\r\n\r\ntype Props = {\r\n  crosswordIndex: number;\r\n  guess?: string;\r\n  onMoved?: (cell: CellData, direction: Direction) => void;\r\n  onChange?: (gridData: GridData) => void;\r\n};\r\n\r\ntype Handle = {\r\n  moveTo: (row: number, col: number) => void,\r\n  guessWord: (guess: string) => void,\r\n  pencilLetter: (letter: string) => void,\r\n  eraseLetter: () => void,\r\n  reset: () => void,\r\n  reveal: () => void,\r\n}\r\n\r\nexport const Crossword = React.forwardRef<Handle, Props>(({ crosswordIndex, onMoved, onChange, guess }, ref) => {\r\n  const crosswordData = crosswords[crosswordIndex];\r\n  const { initialClue: initialWord, initialDirection } = useMemo(() => getInitialClue(crosswordData), [crosswordData]);\r\n  const dispatch = useDispatch();\r\n  const darkMode = useSelector((state: RootState) => state.settings.darkMode);\r\n  const [gridData, setGridData] = useGridData(crosswordIndex);\r\n  const [focusedCell, setFocusedCell, focusedCellRef] = useRefState<UsedCellData>(gridData[initialWord.row][initialWord.col] as UsedCellData);\r\n  const [focusedDirection, setFocusedDirection, focusedDirectionRef] = useRefState<Direction>(initialDirection);\r\n  const isMobile = useMediaBreakpoints('sm', 'down');\r\n\r\n  const svgSize = 240;\r\n  const margin = isMobile ? 10 : 20;\r\n  const crosswordSize = svgSize - 2 * margin;\r\n  const squareSize = crosswordSize / gridData.length;\r\n  const borderSize = 0.125;\r\n  const numberOffset = 0.5;\r\n\r\n  const selectCell = useCallback((cell: UsedCellData, targetDirection: Direction) => {\r\n    const actualDirection = cell[targetDirection] ? targetDirection : otherDirection(targetDirection);\r\n\r\n    setFocusedDirection(actualDirection);\r\n    setFocusedCell(cell)\r\n  }, [setFocusedCell, setFocusedDirection]);\r\n\r\n  const isCellSelected = useCallback((cell: CellData) => cell.used && cell.row === focusedCell.row && cell.col === focusedCell.col, [focusedCell]);\r\n  const getCell = useCallback((row: number, col: number) => get(gridData, `${row}.${col}`, { used: false }) as CellData, [gridData]);\r\n\r\n  const onClick = useCallback((cell: CellData) => {\r\n    if (!cell.used) return;\r\n\r\n    const targetDirection = isCellSelected(cell) ? otherDirection(focusedDirection) : focusedDirection;\r\n    selectCell(cell, targetDirection);\r\n  }, [focusedDirection, selectCell, isCellSelected]);\r\n\r\n  const moveRelative = useCallback((x: number, y: number) => {\r\n    const oldCell = focusedCellRef.current;\r\n    const newCell = getCell(oldCell.row + y, oldCell.col + x);\r\n    const targetDirection = x !== 0 ? 'across' : 'down';\r\n    const cellToSelect = targetDirection === focusedDirection ? newCell : oldCell;\r\n\r\n    selectCell(cellToSelect.used ? cellToSelect : oldCell, targetDirection);\r\n  }, [focusedCellRef, getCell, selectCell, focusedDirection]);\r\n\r\n  const switchDirections = useCallback(() => {\r\n    const targetDirection = otherDirection(focusedDirectionRef.current);\r\n    const targetCell = focusedCellRef.current;\r\n\r\n    selectCell(targetCell, targetDirection);\r\n  }, [focusedCellRef, focusedDirectionRef, selectCell]);\r\n\r\n  useEffect(() => {\r\n    const listener = (e: KeyboardEvent) => {\r\n      if (e.code === 'ArrowLeft') {\r\n        moveRelative(-1, 0);\r\n      } else if (e.code === 'ArrowRight') {\r\n        moveRelative(1, 0);\r\n      } else if (e.code === 'ArrowDown') {\r\n        moveRelative(0, 1);\r\n      } else if (e.code === 'ArrowUp') {\r\n        moveRelative(0, -1);\r\n      } else if (e.code === 'Tab') {\r\n        switchDirections();\r\n      }\r\n    }\r\n    window.addEventListener('keyup', listener)\r\n    return () => {\r\n      window.removeEventListener('keyup', listener)\r\n    }\r\n  }, [moveRelative, switchDirections]);\r\n\r\n  const updateShadowLetters = useCallback(() => {\r\n    const number = focusedCell[focusedDirection] as string;\r\n    const focusedClue = crosswordData[focusedDirection][number] as WordInput;\r\n\r\n    if (!number || !focusedClue) return [];\r\n\r\n    const knownLetters : (string | undefined)[] = [];\r\n    const penciledLetters : (string | undefined)[] = [];\r\n\r\n    Array.from(focusedClue.answer).forEach((_, index) => {\r\n      let letterRow = focusedClue.row + (focusedDirection === 'across' ? 0 : index);\r\n      let letterCol = focusedClue.col + (focusedDirection === 'across' ? index : 0);\r\n      const cell = gridData[letterRow][letterCol];\r\n      if (!cell.used) return undefined;\r\n\r\n      knownLetters.push(cell.guess);\r\n      penciledLetters.push(cell.pencil);\r\n    });\r\n\r\n    dispatch(setKnownLetters(knownLetters));\r\n    dispatch(setPenciledLetters(penciledLetters));\r\n  }, [focusedCell, focusedDirection, gridData, dispatch, crosswordData])\r\n\r\n  useEffect(() => {\r\n    if (onMoved) onMoved(focusedCell, focusedDirection);\r\n    updateShadowLetters();\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [focusedCell, focusedDirection, updateShadowLetters]);\r\n\r\n  useEffect(() => {\r\n    if (onChange) onChange(gridData);\r\n    updateShadowLetters();\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [gridData, updateShadowLetters]);\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    guessWord: (guess: string) => {\r\n      const focusedNumber = focusedCell[focusedDirection];\r\n\r\n      if (!focusedNumber) return;\r\n      const focusedWord = crosswordData[focusedDirection][focusedNumber];\r\n\r\n      const gridDataClone = cloneDeep(gridData);\r\n\r\n      let { row, col, answer } = focusedWord;\r\n      Array.from(guess).forEach((letter, index) => {\r\n        const newRow = row + (focusedDirection === 'down' ? index : 0);\r\n        const newCol = col + (focusedDirection === 'across' ? index : 0);\r\n        const cellClone = gridDataClone[newRow][newCol];\r\n        if (!cellClone.used) return;\r\n        if (letter === answer[index]) cellClone.guess = letter;\r\n      });\r\n\r\n      setGridData(gridDataClone);\r\n    },\r\n    pencilLetter: (letter: string) => {\r\n      const gridDataClone = cloneDeep(gridData);\r\n      let { row, col } = focusedCell;\r\n      gridDataClone[row][col].pencil = letter;\r\n      setGridData(gridDataClone);\r\n    },\r\n    eraseLetter: () => {\r\n      const gridDataClone = cloneDeep(gridData);\r\n      let { row, col } = focusedCell;\r\n      delete gridDataClone[row][col].pencil;\r\n      setGridData(gridDataClone);\r\n    },\r\n    reset: () => {\r\n      setGridData(createGridData(crosswordData));\r\n    },\r\n    reveal: () => {\r\n      const gridDataClone = cloneDeep(gridData);\r\n      gridData.forEach((cells, row) => {\r\n        cells.forEach((_, col) => {\r\n          const cellClone = gridDataClone[row][col];\r\n          if (!cellClone.used) return;\r\n\r\n          cellClone.guess = cellClone.answer;\r\n        });\r\n      });\r\n      setGridData(gridDataClone);\r\n    },\r\n    moveTo: (row, col) => {\r\n      const cell = getCell(row, col);\r\n\r\n      if (!cell.used) return;\r\n      selectCell(cell, focusedDirection);\r\n    },\r\n  }));\r\n\r\n  const getGuessedLetter = (cell: CellData) => {\r\n    if (!cell.used || !guess) return;\r\n\r\n    const focusedNumber = focusedCell[focusedDirection];\r\n\r\n    if (!focusedNumber || cell[focusedDirection] !== focusedNumber) return;\r\n    const focusedWord = crosswordData[focusedDirection][focusedNumber];\r\n    const letterIndex = cell.row - focusedWord.row || cell.col - focusedWord.col;\r\n    return guess[letterIndex];\r\n  };\r\n\r\n  const numberColor = darkMode ? 'white' : 'rgba(0, 0, 0, 0.25)';\r\n  const textColor = darkMode ? 'white' : 'black';\r\n  const guessTextColor = darkMode ? '#f1c40f' : 'rgba(0, 0, 255, 0.6)';\r\n  const pencilColor = darkMode ? 'rgba(170, 170, 170)' : 'rgba(107, 114, 128, 0.5)';\r\n  const selectedCellColor = darkMode ? 'rgb(66, 99, 148)' : '#ffda00';\r\n  const selectedWordColor = darkMode ? 'rgb(54, 45, 103)' : '#a7d8ff';\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${svgSize} ${svgSize}`} width='100%' height='100%'>\r\n      <rect x={margin} y={margin} width={crosswordSize} height={crosswordSize} fill=\"black\" />\r\n      {gridData.flat().map((cell: CellData) => {\r\n        if (!cell.used) return null;\r\n        const key = `${cell.row}_${cell.col}`;\r\n\r\n        let color = darkMode ? 'rgb(87, 88, 96)' : 'white';\r\n        if (isCellSelected(cell)) {\r\n          color = selectedCellColor;\r\n        } else if (cell[focusedDirection] === focusedCell[focusedDirection]) {\r\n          color = selectedWordColor;\r\n        }\r\n\r\n        const guessedLetter = getGuessedLetter(cell);\r\n        let textFill = textColor;\r\n        if (guessedLetter) textFill = guessTextColor;\r\n        if (!guessedLetter && !cell.guess && cell.pencil) textFill = pencilColor;\r\n        const letter = guessedLetter || cell.guess || cell.pencil;\r\n\r\n        return (\r\n          <g key={key} onClick={() => onClick(cell)}>\r\n            <rect\r\n              x={cell.col * squareSize + borderSize + margin}\r\n              y={cell.row * squareSize + borderSize + margin}\r\n              width={squareSize - 2 * borderSize}\r\n              height={squareSize - 2 * borderSize}\r\n              fill={color}\r\n              stroke='black'\r\n              strokeWidth={0.4}\r\n            />\r\n            {cell.number && (\r\n              <text\r\n                x={cell.col * squareSize + numberOffset + margin}\r\n                y={cell.row * squareSize + numberOffset + margin}\r\n                textAnchor=\"start\"\r\n                dominantBaseline=\"hanging\"\r\n                style={{ fontSize: '50%', fill: numberColor, userSelect: 'none' }}\r\n              >{cell.number}</text>\r\n            )}\r\n            {letter && (\r\n              <text\r\n                x={(cell.col + 0.5) * squareSize + margin}\r\n                y={(cell.row + 0.5) * squareSize + margin + 3}\r\n                textAnchor=\"middle\"\r\n                dominantBaseline=\"middle\"\r\n                style={{ fill: textFill, userSelect: 'none', fontSize: '25px' }}\r\n              >{letter}</text>\r\n            )}\r\n            {cell.circle && (\r\n              <circle\r\n                cx={(cell.col + 0.5) * squareSize + margin}\r\n                cy={(cell.row + 0.5) * squareSize + margin}\r\n                r={squareSize / 2 - 1}\r\n                fill='transparent'\r\n                stroke={darkMode ? 'rgba(255,255,255,0.8)' : 'rgba(0,0,0,0.5)'}\r\n                strokeWidth={0.5}\r\n              />\r\n            )}\r\n          </g>\r\n        );\r\n      })}\r\n    </svg>\r\n  )\r\n});\r\n","export const trackEvent = (name: string, params?: Gtag.CustomParams | Gtag.ControlParams | Gtag.EventParams) => {\r\n  if (process.env.NODE_ENV === 'development') return;\r\n\r\n  gtag('event', name, params);\r\n}\r\n\r\nexport const trackShare = (index: number, isGameWon: boolean, isGameLost: boolean, totalGuesses: number) => {\r\n  let category = 'game_in_progress';\r\n  if (isGameWon) category = 'game_won';\r\n  if (isGameLost) category = 'game_lost';\r\n  trackEvent('share', {\r\n    event_category: category,\r\n    event_label: `crosswordle_${index}`,\r\n    value: totalGuesses,\r\n  });\r\n};\r\n\r\nexport const trackGameEnd = (index: number, category: 'game_won' | 'game_lost', totalGuesses: number) => {\r\n  trackEvent('game_end', {\r\n    event_category: category,\r\n    event_label: `crosswordle_${index}`,\r\n    value: totalGuesses,\r\n  });\r\n}\r\n\r\nexport const trackGuess = (index: number, guess: string) => {\r\n  trackEvent('guess', {\r\n    event_category: 'game_in_progress',\r\n    event_label: `crosswordle_${index}`,\r\n    value: guess,\r\n  })\r\n}\r\n","import { trackEvent } from '../../lib/analytics'\r\nimport { Modal } from './Modal'\r\n\r\nexport const SubmitModal : React.FC = () => {\r\n  return (\r\n    <Modal name='submit' title='Submit a Crosswordle' returnTo='share'>\r\n      <p className=\"text-sm text-gray-500\">\r\n        If you enjoy the crosswordle and are good at making crosswords consider submitting your own crosswordle for everyone to play!\r\n      </p>\r\n      <p className='text-sm mt-3 text-gray-500'>\r\n        First build a 5x5 crossword puzzle using only words in the english dictionary. I recommend using{' '}\r\n        <a href=\"https://crosshare.org/construct\" className=\"underline font-bold\" target=\"_blank\" rel=\"noreferrer\" onClick={() => trackEvent('open_crosshare')}>Crosshare.org</a>.\r\n      </p>\r\n      <p className='text-sm mt-3 text-gray-500'>\r\n        Then take a screenshot of your crossword and email it to{' '}\r\n        <a href=\"mailto:crosswordle.submissions@gmail.com\" className=\"underline font-bold\" target=\"_blank\" rel=\"noreferrer\" onClick={() => trackEvent('email_submission')}>crosswordle.submissions@gmail.com</a>\r\n        {' '}along with your name so you can get credit for the puzzle!\r\n      </p>\r\n      <p className='mt-3 text-gray-500'>A couple tips:</p>\r\n      <ul style={{ listStyle: 'inside', textAlign: 'left' }} className='text-gray-500'>\r\n        <li>Try and minimize the number of 2 and 3 letter words that you use as these require a significant amount of luck.</li>\r\n        <li>If you do use short words make sure that all of their letters are used in both down and across directions.</li>\r\n        <li>Generally try to keep to somewhat commonly known words, its no fun trying to guess <b>zibeb</b>.</li>\r\n      </ul>\r\n    </Modal>\r\n  )\r\n}\r\n","import { Modal } from './Modal'\r\n\r\nexport const TimerHelpModal : React.FC = () => {\r\n  return (\r\n    <Modal name='timerHelp' title='Timer' returnTo='settings'>\r\n      <p className=\"text-sm text-gray-500\">\r\n        This setting allows you to see how long it took you to solve the crosswordle. It is disabled by default\r\n        because the original metric for how well you did on a crosswordle puzzle was number of guesses used.\r\n        Solving the crosswordle quickly will naturally cause you to use more guesses.\r\n      </p>\r\n      <br />\r\n      <p className=\"text-sm text-gray-500\">\r\n        The timer starts when you input your first guess and ends when you complete the puzzle.\r\n      </p>\r\n    </Modal>\r\n  )\r\n}\r\n","import {\r\n  QuestionMarkCircleIcon,\r\n  PresentationChartBarIcon,\r\n  CogIcon,\r\n  PencilIcon,\r\n  ArchiveIcon,\r\n  MenuIcon,\r\n} from '@heroicons/react/outline'\r\nimport {\r\n  ElementRef,\r\n  useCallback,\r\n  useEffect,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react'\r\nimport { toast } from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { Grid } from './grid/Grid'\r\nimport { Keyboard } from './keyboard/Keyboard'\r\n// import { HelpModal } from './modals/HelpModal'\r\n// import { ShareModal } from './modals/ShareModal'\r\nimport { useLazyLoadedValidWords } from '../lib/words'\r\nimport '../App.scss'\r\nimport { formatTime, getInitialClue, getTotalGuesses } from '../lib/utils'\r\nimport { CellColors } from './mini-crossword/MiniCrossword'\r\nimport {\r\n  WORDLE_CORRECT_COLOR,\r\n  WORDLE_LOSE_COLOR,\r\n  WORDLE_MISPLACED_COLOR,\r\n  WORDLE_WRONG_COLOR,\r\n} from '../constants/colors'\r\nimport { Crossword } from './crossword/Crossword'\r\nimport {\r\n  CellData,\r\n  Direction,\r\n  GridData,\r\n  UsedCellData,\r\n  WordInput,\r\n} from '../types'\r\nimport { trackGameEnd, trackGuess } from '../lib/analytics'\r\nimport { useGameState } from '../redux/hooks/useGameState'\r\nimport { SubmitModal } from './modals/SubmitModal'\r\nimport { otherDirection } from '../lib/crossword-utils'\r\n// import { SettingsModal } from './modals/SettingsModal'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { RootState } from '../redux/store'\r\nimport { setPencilMode } from '../redux/slices/settingsSlice'\r\nimport { markFirstRender, setOpenModal } from '../redux/slices/navigationSlice'\r\nimport { useStats } from '../redux/hooks/useStats'\r\nimport {\r\n  updateStreakWithLoss,\r\n  updateStreakWithWin,\r\n} from '../redux/slices/statsSlice'\r\nimport crosswords from '../constants/crosswords'\r\nimport { crosswordIndex as defaultIndex } from '../lib/utils'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport NotFound from './NotFound'\r\nimport { TimerHelpModal } from './modals/TimerHelpModal'\r\nimport { incrementTimer, startTimer } from '../redux/slices/wordleSlice'\r\nimport { useInterval } from '../lib/useInterval'\r\nimport cn from 'classnames'\r\nimport { useWindowListener } from '../lib/useWindowListener'\r\nimport { Modal } from './modals/Modal'\r\n\r\ntype crosswordleParams = {\r\n  crosswordNumber?: string\r\n}\r\n\r\nconst Crosswordle: React.FC = () => {\r\n  const navigate = useNavigate()\r\n  const firstRender = useSelector(\r\n    (state: RootState) => state.navigation.firstRender\r\n  )\r\n  const { crosswordNumber } = useParams<crosswordleParams>()\r\n  const crosswordIndex = crosswordNumber\r\n    ? Number(crosswordNumber) - 1\r\n    : defaultIndex\r\n  const crosswordData = crosswords[crosswordIndex]\r\n  const { initialClue, initialDirection } = useMemo(\r\n    () => getInitialClue(crosswordData),\r\n    [crosswordData]\r\n  )\r\n  const crosswordRef = useRef<ElementRef<typeof Crossword>>(null)\r\n  const {\r\n    isGameWon,\r\n    lostCell,\r\n    guesses,\r\n    shareHistory,\r\n    addGuess: addGuessToState,\r\n    pushShareHistory,\r\n    win,\r\n    lose,\r\n    time,\r\n  } = useGameState(crosswordIndex)\r\n  const [currentGuess, setCurrentGuess] = useState('')\r\n  const [currentWord, setCurrentWord] = useState(initialClue.answer)\r\n  const [crossedWord, setCrossedWord] = useState<string | undefined>()\r\n  const [focusedWordData, setFocusedWordData] = useState<WordInput>(initialClue)\r\n  const [focusedDirection, setFocusedDirection] =\r\n    useState<Direction>(initialDirection)\r\n  const [focusedNumber, setFocusedNumber] = useState<string>('1')\r\n  const [crossedNumber, setCrossedNumber] = useState<string | undefined>(\r\n    undefined\r\n  )\r\n  const [focusedIndex, setFocusedIndex] = useState(0)\r\n  const [crossedFocusedIndex, setCrossedFocusedIndex] = useState<\r\n    number | undefined\r\n  >(undefined)\r\n  const [validWords, loadValidWords] = useLazyLoadedValidWords()\r\n  const [showMenu, setShowMenu] = useState<boolean>(false)\r\n  const dispatch = useDispatch()\r\n  const { darkMode, pencilMode, showTimer } = useSelector(\r\n    (state: RootState) => state.settings\r\n  )\r\n  const { totalGames } = useStats()\r\n\r\n  // Open help modal if they have never completed a game\r\n  useEffect(() => {\r\n    if (firstRender && totalGames === 0) dispatch(setOpenModal('help'))\r\n  }, [totalGames, dispatch, firstRender])\r\n\r\n  // Open share modal if they have already finished this game\r\n  useEffect(() => {\r\n    if (isGameWon || lostCell) dispatch(setOpenModal('share'))\r\n  }, [isGameWon, lostCell, dispatch, firstRender])\r\n\r\n  useEffect(() => {\r\n    dispatch(markFirstRender())\r\n  }, [dispatch, firstRender])\r\n\r\n  useEffect(() => {\r\n    if (darkMode) {\r\n      document.documentElement.classList.add('dark')\r\n    } else {\r\n      document.documentElement.classList.remove('dark')\r\n    }\r\n  }, [darkMode])\r\n\r\n  useEffect(() => {\r\n    loadValidWords()\r\n  }, [loadValidWords])\r\n\r\n  useWindowListener('keyup', (e: KeyboardEvent) => {\r\n    if (e.key === 'Shift') togglePencilMode()\r\n  })\r\n\r\n  // After keyboard input move to the next square where you can type\r\n  const moveToIndex = useCallback(\r\n    (index: number) => {\r\n      let { row, col } = focusedWordData\r\n      if (focusedDirection === 'across') col += index\r\n      if (focusedDirection === 'down') row += index\r\n      crosswordRef.current?.moveTo(row, col)\r\n    },\r\n    [focusedDirection, crosswordRef, focusedWordData]\r\n  )\r\n\r\n  // Key event callbacks\r\n  const onChar = (value: string) => {\r\n    if (pencilMode) {\r\n      crosswordRef.current?.pencilLetter(value)\r\n      moveToIndex(focusedIndex + 1)\r\n      return\r\n    }\r\n\r\n    const guessesForWord = guesses[focusedDirection][focusedNumber]\r\n\r\n    if (currentGuess.length < currentWord.length && guessesForWord.length < 6) {\r\n      const newGuess = `${currentGuess}${value}`\r\n      setCurrentGuess(newGuess)\r\n      moveToIndex(newGuess.length)\r\n    }\r\n  }\r\n\r\n  const onDelete = () => {\r\n    if (pencilMode) {\r\n      crosswordRef.current?.eraseLetter()\r\n      moveToIndex(focusedIndex - 1)\r\n      return\r\n    }\r\n\r\n    const newGuess = currentGuess.slice(0, -1)\r\n    setCurrentGuess(newGuess)\r\n    moveToIndex(newGuess.length)\r\n  }\r\n\r\n  // Callbacks to keep move history in sync with guesses\r\n  const updateShareHistory = useCallback(\r\n    (guess: string) => {\r\n      const { row, col, answer } = focusedWordData\r\n      const previousCellColors = shareHistory.slice(-1)[0] || {}\r\n      const newCellColors = Object.keys(previousCellColors).reduce(\r\n        (cellColors, key) => {\r\n          if (previousCellColors[key] === WORDLE_CORRECT_COLOR)\r\n            cellColors[key] = previousCellColors[key]\r\n          return cellColors\r\n        },\r\n        {} as CellColors\r\n      )\r\n\r\n      guess.split('').forEach((letter, index) => {\r\n        const newRow = row + (focusedDirection === 'across' ? 0 : index)\r\n        const newCol = col + (focusedDirection === 'across' ? index : 0)\r\n\r\n        if (newCellColors[`${newRow}_${newCol}`] === WORDLE_CORRECT_COLOR)\r\n          return\r\n\r\n        if (letter === answer[index]) {\r\n          newCellColors[`${newRow}_${newCol}`] = WORDLE_CORRECT_COLOR\r\n        } else if (answer.includes(letter)) {\r\n          newCellColors[`${newRow}_${newCol}`] = WORDLE_MISPLACED_COLOR\r\n        } else {\r\n          newCellColors[`${newRow}_${newCol}`] = WORDLE_WRONG_COLOR\r\n        }\r\n      })\r\n\r\n      pushShareHistory(newCellColors)\r\n    },\r\n    [shareHistory, pushShareHistory, focusedWordData, focusedDirection]\r\n  )\r\n\r\n  const updateShareHistoryWithLoss = useCallback(\r\n    (cell: UsedCellData) => {\r\n      const previousCellColors = shareHistory.slice(-1)[0] || {}\r\n      const key = `${cell.row}_${cell.col}`\r\n\r\n      pushShareHistory({ ...previousCellColors, [key]: WORDLE_LOSE_COLOR })\r\n    },\r\n    [shareHistory, pushShareHistory]\r\n  )\r\n\r\n  const addGuess = (guess: string) => {\r\n    if (shareHistory.length === 0)\r\n      dispatch(startTimer({ index: crosswordIndex }))\r\n    trackGuess(crosswordIndex, guess)\r\n    addGuessToState(focusedDirection, focusedNumber, guess)\r\n\r\n    crosswordRef.current?.guessWord(currentGuess)\r\n\r\n    updateShareHistory(guess)\r\n  }\r\n\r\n  // Check for game win or game loss\r\n  const isCellLost = useCallback(\r\n    (cell: UsedCellData) => {\r\n      if (cell.guess === cell.answer) return false\r\n\r\n      if (cell.across && cell.down) {\r\n        return (\r\n          guesses.across[cell.across].length >= 6 &&\r\n          guesses.down[cell.down].length >= 6\r\n        )\r\n      } else if (cell.across) {\r\n        return guesses.across[cell.across].length >= 6\r\n      } else if (cell.down) {\r\n        return guesses.down[cell.down].length >= 6\r\n      }\r\n\r\n      return false\r\n    },\r\n    [guesses]\r\n  )\r\n\r\n  const checkWinOrLoss = (gridData: GridData) => {\r\n    if (isGameWon || lostCell) return\r\n\r\n    let gameLost = false\r\n    let crosswordCorrect = true\r\n\r\n    gridData.forEach((row) => {\r\n      return row.forEach((cell) => {\r\n        if (!cell.used) return\r\n        if (isCellLost(cell)) {\r\n          gameLost = true\r\n          lose(cell)\r\n          updateShareHistoryWithLoss(cell)\r\n        }\r\n        if (crosswordCorrect) crosswordCorrect = cell.guess === cell.answer\r\n      })\r\n    })\r\n\r\n    const totalGuesses = getTotalGuesses(guesses)\r\n\r\n    if (gameLost) {\r\n      trackGameEnd(crosswordIndex, 'game_lost', totalGuesses)\r\n      dispatch(updateStreakWithLoss(crosswordIndex))\r\n      crosswordRef?.current?.reveal()\r\n    }\r\n\r\n    if (crosswordCorrect) {\r\n      trackGameEnd(crosswordIndex, 'game_won', totalGuesses)\r\n      dispatch(updateStreakWithWin(crosswordIndex))\r\n      win()\r\n    }\r\n  }\r\n\r\n  const onEnter = async () => {\r\n    if (currentGuess.length !== currentWord.length) return\r\n    const allowedWords = validWords || (await loadValidWords())\r\n\r\n    const wordAllowed = allowedWords.includes(currentGuess.toLowerCase())\r\n\r\n    // Alert user if guess is not a word\r\n    if (!wordAllowed && currentGuess !== currentWord) {\r\n      toast.error('Word not found')\r\n      return\r\n    }\r\n\r\n    const guessesForWord = guesses[focusedDirection][focusedNumber]\r\n\r\n    if (\r\n      currentGuess.length === currentWord.length &&\r\n      guessesForWord.length < 6 &&\r\n      !guessesForWord.includes(currentGuess)\r\n    ) {\r\n      addGuess(currentGuess)\r\n      setCurrentGuess('')\r\n    }\r\n  }\r\n\r\n  const onGridDataChange = (gridData: GridData) => {\r\n    checkWinOrLoss(gridData)\r\n  }\r\n\r\n  const onMoved = (cell: CellData, direction: Direction) => {\r\n    if (!cell.used) return\r\n\r\n    const number = cell[direction] || ''\r\n    const otherNumber = cell[otherDirection(direction)]\r\n    const wordData = crosswordData[direction][number]\r\n    const crossedWordData = otherNumber\r\n      ? crosswordData[otherDirection(direction)][otherNumber]\r\n      : undefined\r\n    setCurrentWord(wordData.answer)\r\n    setCrossedWord(crossedWordData?.answer)\r\n    setFocusedWordData(wordData)\r\n    setFocusedNumber(number)\r\n    setCrossedNumber(otherNumber)\r\n    setFocusedDirection(direction)\r\n    setFocusedIndex(cell.row - wordData.row || cell.col - wordData.col)\r\n    setCrossedFocusedIndex(\r\n      crossedWordData\r\n        ? cell.row - crossedWordData.row || cell.col - crossedWordData.col\r\n        : undefined\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCurrentGuess('')\r\n  }, [focusedDirection, focusedNumber])\r\n\r\n  const togglePencilMode = () => {\r\n    const enabled = !pencilMode\r\n    dispatch(setPencilMode(enabled))\r\n    setCurrentGuess('')\r\n  }\r\n\r\n  useInterval(() => {\r\n    if (time !== undefined && !isGameWon && !lostCell) {\r\n      dispatch(incrementTimer({ index: crosswordIndex }))\r\n    }\r\n  }, 1000)\r\n\r\n  useEffect(() => {\r\n    // Correction toast specifically for crosswordle 104\r\n    if (crosswordIndex === 103) dispatch(setOpenModal('notice'))\r\n  }, [crosswordIndex, dispatch])\r\n\r\n  // Prevent user from accessing puzzles that haven't yet been released\r\n  if (defaultIndex < crosswordIndex) return <NotFound />\r\n\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen\">\r\n      <div className=\"flex w-screen mx-auto items-center border-b-slate-400 border-b-[1px] p-3 md:p-4\">\r\n        <div className=\"grow\">\r\n          <h1 className=\"text-md md:text-xl font-bold whitespace-nowrap dark:text-white\">\r\n            WordleWord\r\n          </h1>\r\n\r\n        </div>\r\n        <ArchiveIcon\r\n          className=\"h-6 w-6 mr-3 cursor-pointer dark:stroke-white hidden md:inline\"\r\n          onClick={() => navigate('/puzzles')}\r\n        />\r\n        <div className={cn('menu md:hidden', { hidden: !showMenu })}>\r\n          <div\r\n            className=\"mb-2 mx-2 cursor-pointer flex items-center\"\r\n            onClick={() => {\r\n              dispatch(setOpenModal('share'))\r\n              setShowMenu(false)\r\n            }}\r\n          >\r\n            <PresentationChartBarIcon className=\"h-4 w-4 mr-2\" />\r\n            Share\r\n          </div>\r\n          <div\r\n            className=\"mb-2 mx-2 cursor-pointer flex items-center\"\r\n            onClick={() => {\r\n              navigate('/puzzles')\r\n              setShowMenu(false)\r\n            }}\r\n          >\r\n            <ArchiveIcon className=\"h-4 w-4 mr-2\" />\r\n            Puzzle Archive\r\n          </div>\r\n          <div\r\n            className=\"mb-2 mx-2 cursor-pointer flex items-center\"\r\n            onClick={() => {\r\n              dispatch(setOpenModal('help'))\r\n              setShowMenu(false)\r\n            }}\r\n          >\r\n            <QuestionMarkCircleIcon className=\"h-4 w-4 mr-2\" />\r\n            How to Play\r\n          </div>\r\n          <div\r\n            className=\"mb-2 mx-2 cursor-pointer flex items-center\"\r\n            onClick={() => {\r\n              dispatch(setOpenModal('settings'))\r\n              setShowMenu(false)\r\n            }}\r\n          >\r\n            <CogIcon className=\"h-4 w-4 mr-2\" />\r\n            Settings\r\n          </div>\r\n        </div>\r\n        {/* <ShareModal crosswordIndex={crosswordIndex} /> */}\r\n        {/* <HelpModal />\r\n        <HelpModal onlyKeyboard={true} /> */}\r\n        {/* <SettingsModal /> */}\r\n        <SubmitModal />\r\n        <TimerHelpModal />\r\n        <Modal name=\"notice\" title=\"Updates to today's puzzle\">\r\n          <p className=\"text-gray-400\">\r\n            Today's puzzle originally had a typo \"ONIOM\" instead of \"ONION\". If\r\n            you had previously started this puzzle I have reset it, if you still\r\n            see the word \"ONIOM\" in the puzzle try refreshing the page. If you\r\n            previously lost this puzzle I reset your streak so you won't lose\r\n            your streak. Sorry for the typo!\r\n          </p>\r\n        </Modal>\r\n      </div>\r\n      <div className=\"flex flex-1 flex-col w-screen overflow-x-hidden md:flex-row lg:flex-row\">\r\n        <div className=\"w-full flex md:items-center justify-center px-20 md:p-6 md:w-1/2\">\r\n          <div className=\"max-w-[300px] md:max-w-[500px] w-full h-full justify-center max-width-static-mobile\">\r\n            <Crossword\r\n              crosswordIndex={crosswordIndex}\r\n              onMoved={onMoved}\r\n              onChange={onGridDataChange}\r\n              ref={crosswordRef}\r\n              guess={currentGuess}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"w-full flex flex-1 md:items-center md:w-1/2 md:border-l border-slate-400\">\r\n          <div className=\"md:py-8 max-w-7xl mx-auto sm:px-6 lg:px-8 keyboard\">\r\n            <Grid\r\n              guesses={guesses[focusedDirection][focusedNumber] || []}\r\n              currentGuess={currentGuess}\r\n              solution={currentWord}\r\n              focusedIndex={focusedIndex}\r\n            />\r\n            <Keyboard\r\n              onChar={onChar}\r\n              onDelete={onDelete}\r\n              onEnter={onEnter}\r\n              solution={currentWord}\r\n              crossedSolution={crossedWord}\r\n              guesses={guesses[focusedDirection][focusedNumber] || []}\r\n              crossedGuesses={\r\n                guesses[otherDirection(focusedDirection)][crossedNumber || 0] ||\r\n                []\r\n              }\r\n              index={focusedIndex}\r\n              crossedIndex={crossedFocusedIndex}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Crosswordle\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { Direction, UsedCellData } from \"../../types\"\r\nimport { RootState } from \"../store\"\r\nimport { addGuess as addGuessAction, pushShareHistory as pushShareHistoryAction, setGameWon, generateInitialGuessState, setLostCell } from \"../slices/wordleSlice\";\r\nimport { CellColors } from \"../../components/mini-crossword/MiniCrossword\";\r\nimport crosswords from \"../../constants/crosswords\";\r\n\r\nexport const useGameState = (index: number) => {\r\n  const guesses = useSelector((state: RootState) => state.wordle.guesses[index] || generateInitialGuessState(crosswords[index]));\r\n  const shareHistory = useSelector((state: RootState) => state.wordle.shareHistories[index] || []);\r\n  const isGameWon = useSelector((state: RootState) => state.wordle.gameWins[index] || false);\r\n  const lostCell = useSelector((state: RootState) => state.wordle.lostCells[index] as UsedCellData | undefined);\r\n  const time = useSelector((state: RootState) => state.wordle.times[index] as number | undefined);\r\n  const dispatch = useDispatch();\r\n\r\n  const addGuess = useCallback((direction: Direction, number: string, guess: string) => {\r\n    dispatch(addGuessAction({ index, direction, number, guess }));\r\n  }, [dispatch, index]);\r\n\r\n  const pushShareHistory = useCallback((cellColors: CellColors) => {\r\n    dispatch(pushShareHistoryAction({ index, cellColors }));\r\n  }, [dispatch, index]);\r\n\r\n  const win = useCallback(() => {\r\n    dispatch(setGameWon({ index }));\r\n  }, [dispatch, index]);\r\n\r\n  const lose = useCallback((lostCell: UsedCellData) => {\r\n    dispatch(setLostCell({ index, lostCell }));\r\n  }, [dispatch, index]);\r\n\r\n  return { guesses, addGuess, shareHistory, pushShareHistory, isGameWon, win, lostCell, lose, time };\r\n}\r\n","import { useCallback, useState } from \"react\";\r\n\r\nexport const useLazyLoadedValidWords = () => {\r\n  const [validWords, setValidWords] = useState<string[] | null>(null);\r\n\r\n  const loadWords = useCallback(async () => {\r\n    const response = await fetch(process.env.PUBLIC_URL + '/validWords.json');\r\n    const words = await response.json();\r\n\r\n    setValidWords(words);\r\n    return words;\r\n  }, []);\r\n\r\n  return [validWords, loadWords] as const;\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store\";\r\n\r\nexport const useStats = () => {\r\n  const { streak, maxStreak } = useSelector((state: RootState) => state.stats);\r\n  const { gameWins, shareHistories, lostCells } = useSelector((state: RootState) => state.wordle);\r\n  const totalGamesWon = useMemo(() => Object.values(gameWins).filter(Boolean).length, [gameWins]);\r\n  const totalGamesLost = useMemo(() => Object.values(lostCells).filter(Boolean).length, [lostCells]);\r\n  const averageGuesses = useMemo(() => {\r\n    let totalGuesses = 0;\r\n    Object.keys(shareHistories).forEach((index: string) => {\r\n      if (gameWins[Number(index)]) totalGuesses += shareHistories[Number(index)].length;\r\n    });\r\n    return totalGuesses / totalGamesWon;\r\n  }, [shareHistories, gameWins, totalGamesWon]);\r\n\r\n  return {\r\n    streak,\r\n    maxStreak,\r\n    totalGamesWon,\r\n    totalGamesLost,\r\n    totalGames: totalGamesLost + totalGamesWon,\r\n    winRatio: totalGamesWon / (totalGamesWon + totalGamesLost),\r\n    averageGuesses\r\n  } as const;\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport function useInterval(callback: Function, delay: number) {\r\n  const savedCallback = useRef<Function>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    let id = setInterval(() => {\r\n      if (savedCallback.current) savedCallback.current();\r\n    }, delay);\r\n    return () => clearInterval(id);\r\n  }, [delay]);\r\n}\r\n","import { Fragment, ReactNode } from 'react'\r\nimport { Dialog, Transition } from '@headlessui/react'\r\nimport { XCircleIcon } from '@heroicons/react/outline'\r\nimport { RootState } from '../../redux/store'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setOpenModal } from '../../redux/slices/navigationSlice'\r\n\r\ntype Props = {\r\n  name: RootState['navigation']['openModal'];\r\n  title: string;\r\n  titleIcon?: ReactNode;\r\n  returnTo?: RootState['navigation']['openModal'];\r\n}\r\n\r\nexport const Modal : React.FC<Props> = ({ name, title, titleIcon, returnTo, children }) => {\r\n  const dispatch = useDispatch();\r\n  const isOpen = useSelector((state: RootState) => state.navigation.openModal === name);\r\n\r\n  return (\r\n    <Transition.Root show={isOpen} as={Fragment}>\r\n      <Dialog\r\n        as=\"div\"\r\n        className=\"fixed z-10 inset-0 overflow-y-auto\"\r\n        onClose={() => dispatch(setOpenModal(returnTo))}\r\n      >\r\n        <div className=\"flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"ease-out duration-300\"\r\n            enterFrom=\"opacity-0\"\r\n            enterTo=\"opacity-100\"\r\n            leave=\"ease-in duration-200\"\r\n            leaveFrom=\"opacity-100\"\r\n            leaveTo=\"opacity-0\"\r\n          >\r\n            <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\r\n          </Transition.Child>\r\n\r\n          {/* This element is to trick the browser into centering the modal contents. */}\r\n          <span\r\n            className=\"hidden sm:inline-block sm:align-middle sm:h-screen\"\r\n            aria-hidden=\"true\"\r\n          >\r\n            &#8203;\r\n          </span>\r\n          <Transition.Child\r\n            as={Fragment}\r\n            enter=\"ease-out duration-300\"\r\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\r\n            leave=\"ease-in duration-200\"\r\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\r\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\r\n          >\r\n            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all md:max-w-lg sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6\">\r\n              <div className=\"absolute right-4 top-4\">\r\n                <XCircleIcon\r\n                  className=\"h-6 w-6 cursor-pointer\"\r\n                  onClick={() => dispatch(setOpenModal(returnTo))}\r\n                />\r\n              </div>\r\n              <div>\r\n                <div className=\"text-center\">\r\n                  <div className='mb-2'>{titleIcon}</div>\r\n                  <Dialog.Title\r\n                    as=\"h3\"\r\n                    className=\"text-lg leading-6 font-medium text-gray-900\"\r\n                  >\r\n                    {title}\r\n                  </Dialog.Title>\r\n                  <div className=\"mt-2\">\r\n                    {children}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Transition.Child>\r\n        </div>\r\n      </Dialog>\r\n    </Transition.Root>\r\n  )\r\n}\r\n","import type {\r\n  CrosswordInput,\r\n  Direction,\r\n  GridData,\r\n  UsedCellData,\r\n} from '../types';\r\n\r\ntype RowOrCol = 'row' | 'col';\r\n\r\nconst directionInfo: Record<\r\n  Direction,\r\n  { primary: RowOrCol; orthogonal: RowOrCol }\r\n> = {\r\n  across: {\r\n    primary: 'col',\r\n    orthogonal: 'row',\r\n  },\r\n  down: {\r\n    primary: 'row',\r\n    orthogonal: 'col',\r\n  },\r\n};\r\n\r\nexport const bothDirections = Object.keys(directionInfo) as Direction[];\r\n\r\nexport function isAcross(direction: Direction) {\r\n  return direction === 'across';\r\n}\r\n\r\nexport function otherDirection(direction: Direction) {\r\n  return isAcross(direction) ? 'down' : 'across';\r\n}\r\n\r\nexport function calculateExtents(data: CrosswordInput, direction: Direction) {\r\n  const dir = directionInfo[direction];\r\n  let primaryMax = 0;\r\n  let orthogonalMax = 0;\r\n\r\n  Object.entries(data[direction]).forEach(([, info]) => {\r\n    const primary = info[dir.primary] + info.answer.length - 1;\r\n    if (primary > primaryMax) {\r\n      primaryMax = primary;\r\n    }\r\n\r\n    const orthogonal = info[dir.orthogonal];\r\n    if (orthogonal > orthogonalMax) {\r\n      orthogonalMax = orthogonal;\r\n    }\r\n  });\r\n\r\n  return {\r\n    [dir.primary]: primaryMax,\r\n    [dir.orthogonal]: orthogonalMax,\r\n  };\r\n}\r\n\r\nexport function createEmptyGrid(size: number) {\r\n  const gridData: GridData = Array(size);\r\n\r\n  for (let r = 0; r < size; r++) {\r\n    gridData[r] = Array(size);\r\n    for (let c = 0; c < size; c++) {\r\n      gridData[r][c] = {\r\n        row: r,\r\n        col: c,\r\n        used: false,\r\n      };\r\n    }\r\n  }\r\n\r\n  return gridData;\r\n}\r\n\r\n// Given the \"nice format\" for a crossword, generate the usable data optimized\r\n// for rendering and our interactivity.\r\nexport function createGridData(data: CrosswordInput) {\r\n  const acrossMax = calculateExtents(data, 'across');\r\n  const downMax = calculateExtents(data, 'down');\r\n\r\n  const size =\r\n    Math.max(...Object.values(acrossMax), ...Object.values(downMax)) + 1;\r\n\r\n  const gridData = createEmptyGrid(size);\r\n\r\n  bothDirections.forEach((direction) => {\r\n    Object.entries(data[direction]).forEach(([number, info]) => {\r\n      const { row: rowStart, col: colStart, answer } = info;\r\n      for (let i = 0; i < answer.length; i++) {\r\n        const row = rowStart + (direction === 'down' ? i : 0);\r\n        const col = colStart + (direction === 'across' ? i : 0);\r\n        const cellData = gridData[row][col] as UsedCellData;\r\n  \r\n        cellData.used = true;\r\n        cellData.answer = answer[i];\r\n        cellData[direction] = number;\r\n  \r\n        if (i === 0) cellData.number = number;\r\n      }\r\n    });\r\n  });\r\n\r\n  if (data.circles) {\r\n    data.circles.forEach(([row, col]) => {\r\n      const cellData = gridData[row][col];\r\n      if (!cellData.used) return;\r\n\r\n      cellData.circle = true;\r\n    });\r\n  }\r\n\r\n  return gridData;\r\n}\r\n","import { useCallback } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { GridData } from \"../../types\"\r\nimport { RootState } from \"../store\"\r\nimport { setGridData } from \"../slices/crosswordSlice\";\r\nimport { createGridData } from \"../../lib/crossword-utils\";\r\nimport crosswords from \"../../constants/crosswords\";\r\n\r\nexport const useGridData = (index: number) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const updateGridData = useCallback((newGridData: GridData) => {\r\n    dispatch(setGridData({ index, gridData: newGridData }));\r\n  }, [dispatch, index]);\r\n\r\n  const gridData = useSelector((state: RootState) => {\r\n    const data = state.crossword.gridDatas[index];\r\n    if (!data) {\r\n      const initialGridData = createGridData(crosswords[index]);\r\n      updateGridData(initialGridData);\r\n      return initialGridData;\r\n    }\r\n    return data;\r\n  });\r\n\r\n  return [gridData, updateGridData] as const;\r\n}\r\n"],"names":["BREAKPOINTS","xs","sm","md","lg","useMediaBreakpoints","size","direction","width","useWindowWidth","useRefState","initial","useState","state","_setState","stateRef","useRef","value","current","getStatuses","solution","guesses","knownChars","charObj","forEach","word","split","letter","i","includes","Cell","status","mode","isFocused","isMobile","height","useWindowHeight","highContrastMode","useSelector","settings","classes","classnames","className","CompletedRow","guess","statuses","splitSolution","splitGuess","solutionCharsTaken","map","_","Array","from","length","indexOfPresentChar","findIndex","x","index","getGuessStatuses","CurrentRow","focusedIndex","crossword","knownLetters","penciledLetters","emptyCells","guessLength","getLetter","getMode","EmptyRow","MobileGrid","currentGuess","firstHalf","slice","firstHalfEmpties","secondHalf","secondHalfEmpties","Grid","empties","Key","children","crossedStatus","onClick","useWindowListener","action","callback","savedCallback","useEffect","listener","e","window","addEventListener","removeEventListener","Keyboard","crossedSolution","onChar","onDelete","onEnter","crossedGuesses","crossedIndex","advancedKeyboard","charStatuses","crossedCharStatus","undefined","code","key","toUpperCase","WORDLE_CORRECT_COLOR","Crossword","React","ref","crosswordIndex","onMoved","onChange","crosswordData","crosswords","useMemo","getInitialClue","initialWord","initialClue","initialDirection","dispatch","useDispatch","darkMode","useGridData","gridData","setGridData","row","col","focusedCell","setFocusedCell","focusedCellRef","focusedDirection","setFocusedDirection","focusedDirectionRef","margin","crosswordSize","squareSize","borderSize","selectCell","useCallback","cell","targetDirection","actualDirection","otherDirection","isCellSelected","used","getCell","get","moveRelative","y","oldCell","newCell","cellToSelect","switchDirections","targetCell","updateShadowLetters","number","focusedClue","answer","letterRow","letterCol","push","pencil","setKnownLetters","setPenciledLetters","useImperativeHandle","guessWord","focusedNumber","focusedWord","gridDataClone","cloneDeep","newCol","cellClone","pencilLetter","eraseLetter","reset","createGridData","reveal","cells","moveTo","numberColor","textColor","guessTextColor","pencilColor","selectedCellColor","selectedWordColor","viewBox","fill","flat","color","guessedLetter","letterIndex","getGuessedLetter","textFill","stroke","strokeWidth","textAnchor","dominantBaseline","style","fontSize","userSelect","circle","cx","cy","r","trackEvent","name","params","gtag","trackGameEnd","category","totalGuesses","event_category","event_label","SubmitModal","Modal","title","returnTo","href","target","rel","listStyle","textAlign","TimerHelpModal","navigate","useNavigate","firstRender","navigation","crosswordNumber","useParams","Number","defaultIndex","crosswordRef","wordle","generateInitialGuessState","shareHistory","shareHistories","isGameWon","gameWins","lostCell","lostCells","time","times","addGuess","addGuessAction","pushShareHistory","cellColors","pushShareHistoryAction","win","setGameWon","lose","setLostCell","useGameState","addGuessToState","setCurrentGuess","currentWord","setCurrentWord","crossedWord","setCrossedWord","focusedWordData","setFocusedWordData","setFocusedNumber","crossedNumber","setCrossedNumber","setFocusedIndex","crossedFocusedIndex","setCrossedFocusedIndex","validWords","setValidWords","fetch","process","response","json","words","useLazyLoadedValidWords","loadValidWords","showMenu","setShowMenu","pencilMode","showTimer","stats","streak","maxStreak","totalGamesWon","Object","values","filter","Boolean","totalGamesLost","averageGuesses","keys","totalGames","winRatio","useStats","setOpenModal","markFirstRender","document","documentElement","classList","add","remove","togglePencilMode","moveToIndex","updateShareHistory","previousCellColors","newCellColors","reduce","newRow","updateShareHistoryWithLoss","startTimer","trackGuess","isCellLost","across","down","allowedWords","toLowerCase","toast","guessesForWord","enabled","setPencilMode","delay","id","setInterval","clearInterval","useInterval","incrementTimer","NotFound","cn","hidden","otherNumber","wordData","crossedWordData","gameLost","crosswordCorrect","getTotalGuesses","updateStreakWithLoss","updateStreakWithWin","checkWinOrLoss","newGuess","titleIcon","isOpen","openModal","show","as","Fragment","onClose","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","directionInfo","primary","orthogonal","bothDirections","isAcross","calculateExtents","data","dir","primaryMax","orthogonalMax","entries","info","acrossMax","downMax","c","createEmptyGrid","Math","max","rowStart","colStart","cellData","circles","updateGridData","newGridData","gridDatas","initialGridData"],"sourceRoot":""}